/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puissance.pkg4;

import javax.swing.ImageIcon;
import java.awt.Image;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
/**
 *
 * @author simon
 */
public class PlateauJeu extends javax.swing.JPanel implements MouseListener, MouseMotionListener{

    int SizeX =6;
    int SizeY =7;
    
    Jeton [][] Plateau = new Jeton [SizeX][SizeY];
    
    Joueur j1 = new Joueur(1,true);
    IA ia = new IA(2, false);

    Image plateauimg;
    /**
     * Creates new form PlateauJeu
     */
    public PlateauJeu() {
        addMouseListener(this);
	addMouseMotionListener(this);
        initComponents();        
        this.plateauimg = new ImageIcon(getClass().getResource("images/plateau.png")).getImage();
        Dimension size = new Dimension(this.plateauimg.getWidth(this), this.plateauimg.getHeight(this));
        setPreferredSize(size);
        setMinimumSize(size);
        setMaximumSize(size);
        setSize(size);
        setLayout(null);
        this.setVisible(true);

       
        int decalageLigne = 71 + 8;
        int decalageColone = 71 + 8;
        
        for (int i = 0; i < SizeY; i++) {
            for (int j = 0; j < SizeX; j++) {
                Jeton curentJeton = Plateau[j][i] = new Jeton();
                this.add(curentJeton);
                curentJeton.setLocation(decalageLigne * i + i*5, decalageColone * j + j*5);
                curentJeton.setColonne(i);
                curentJeton.setLigne(j);
            }
            
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paintComponent(Graphics g) {
      super.paintComponent(g);
      g.drawImage(this.plateauimg, 0, 0, null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    void PlacerJeton(int colonne){

        int line = SizeX-1;

        while(Plateau[line][colonne].getJoueur() !=0){
            line = line-1;
        }
        
//        System.out.println(Plateau[line][colonne]);
        
        if(j1.isTourJoueur()){
            Plateau[line][colonne].setJoueur(j1.getNumeroJoueur());
            Plateau[line][colonne].ChangerCouleur(j1.getNumeroJoueur());
            j1.setDernierJeton(Plateau[line][colonne]);
            
            if(FinPartie(Plateau[line][colonne])){
                // TODO : POPUP fin du jeu
                System.out.println("Fin de partie, victoire de j1");
            }
        }
        else{
            Plateau[line][colonne].setJoueur(ia.getNumeroJoueur());
            Plateau[line][colonne].ChangerCouleur(ia.getNumeroJoueur());
            ia.setDernierJeton(Plateau[line][colonne]);
            if(FinPartie(Plateau[line][colonne])){
                // TODO : POPUP fin du jeu
                System.out.println("Fin de partie, victoire de ia");
            }
        }
        
    }
    
    void ChangerJoueur(){
        if(j1.isTourJoueur()){
            j1.setJoueurReel(false);
            ia.setJoueurReel(true);
        }
        else{
            j1.setJoueurReel(true);
            ia.setJoueurReel(false);
        }
    }
    
    boolean CheckLigne(Jeton j){
        boolean check = false;
        int cptJetonJoueur = 0;
        System.out.println("ligne" + j.getLigne());
        System.out.println("colonne" + j.getColonne());
        for (int i = 0; i < 6; i++) {
            if(Plateau[j.getLigne()][i].getJoueur() == j.getJoueur()){
                cptJetonJoueur = cptJetonJoueur +1;
            }else{
                cptJetonJoueur = 0;
            }
            
            if(cptJetonJoueur >=4){
                check = true;
            }
           
        }
        
        return check;
    }
    
    boolean CheckColonne(Jeton j){
        boolean check = false;
        int cpt = 0;
  
        for(int i=0; i <= SizeX-1; i++){
            if(Plateau[i][j.getColonne()].getJoueur() == j.getJoueur()){
                cpt++;
            }
            else{
                cpt =0;
            }
            
            if(cpt == 4){
                check = true;
            }
        }
        

        return check;
    }
    
    boolean CheckDiagonal1(Jeton j){
        
        return false;
    }
    
    boolean CheckDiagonal2(Jeton j){
        
        return false;
    }
    
    boolean FinPartie(Jeton j){
        
        boolean end = false;
        
        end = end || CheckColonne(j);
        end = end || CheckLigne(j);
//        end = end || CheckDiagonal1(j);
//        end = end || CheckDiagonal2(j);
        
        
        return end;
    }
    
    
        @Override
    public void mousePressed(MouseEvent e){
        
        int LargeurColone = 600/7;
        int x = (e.getX());
        for (int i = 0; i < 7; i++) {
            if(0 + LargeurColone*i < x && x < LargeurColone + LargeurColone*i){
                this.PlacerJeton(i);
                this.ChangerJoueur();
                
            }
        }
        
        
        if(ia.isTourJoueur()){
            this.PlacerJeton(ia.MeilleurPlacer());
            this.ChangerJoueur();
        }
        
        repaint();
        
       
    }
    
    @Override
    public void mouseReleased(MouseEvent e){}
    
    @Override
    public void mouseClicked(MouseEvent e){

    }
    
    @Override
    public void mouseEntered(MouseEvent e){}
    
    @Override
    public void mouseExited(MouseEvent e){}
    
    @Override
    public void mouseMoved(MouseEvent e){
        int LargeurColone = 600/7;
        int x = (e.getX());
        for (int i = 0; i < 7; i++) {
            if(LargeurColone*i < x && x < LargeurColone + LargeurColone*i && this.Plateau[0][i].getJoueur() ==0){
                this.Plateau[0][i].ChangerCouleur(j1.getNumeroJoueur());

            }else{
                if(this.Plateau[0][i].getJoueur() == 0){
                    this.Plateau[0][i].ChangerCouleur(0);
                }
            }
        }
        repaint();
        
    }
    
    @Override
    public void mouseDragged(MouseEvent e){
        
    }

}
